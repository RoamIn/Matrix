{"version":3,"sources":["components/base/icon/index.jsx","routes/index.jsx","components/router-view/index.jsx","components/sidebar/index.jsx","serviceWorker.js","index.js"],"names":["Icon","classString","classNames","this","props","className","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","style","onClick","aria-hidden","xlinkHref","concat","type","Component","src_routes","path","name","icon","exact","component","lazy","Promise","all","__webpack_require__","e","then","bind","RouterView","_this$props$routes","routes","react_default","react","fallback","position","top","left","transform","Switch","map","route","index","Route","key","render","Object","assign","Sidebar","state","navigates","_this2","location","pathname","Link","to","withRouter","Boolean","window","hostname","match","ReactDOM","BrowserRouter","components_sidebar","router_view","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kKAKMA,0LAEE,IAAMC,EAAcC,IAChB,SACAC,KAAKC,MAAMC,WAEf,OACIC,EAAAC,EAAAC,cAAA,KAAGH,UAAWJ,EAAaQ,MAAON,KAAKC,MAAMK,MAAOC,QAASP,KAAKC,MAAMM,SACpEJ,EAAAC,EAAAC,cAAA,OAAKG,cAAY,QACbL,EAAAC,EAAAC,cAAA,OAAKI,UAAS,SAAAC,OAAWV,KAAKC,MAAMU,iBATrCC,cAgBJf,8LCnBAgB,SAAA,CACX,CACIC,KAAM,UACNC,KAAM,SACNC,KAAM,SACNC,OAAO,EACPC,UAAWC,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cAE1B,CACIX,KAAM,IACNC,KAAM,OACNC,KAAM,SACNC,OAAO,EACPC,UAAWC,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cAE1B,CACIX,KAAM,KACNC,KAAM,WACNC,KAAM,MACNE,UAAWC,eAAK,kBAAMG,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,mECYfC,mLA7BF,IAAAC,EACmB3B,KAAKC,MAArB2B,cADH,IAAAD,EACY,GADZA,EAGL,OACIE,EAAAzB,EAAAC,cAACyB,EAAA,SAAD,CAAUC,SAAUF,EAAAzB,EAAAC,cAAA,OAAKC,MAAO,CAC5B0B,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,0BAJK,YAMhBN,EAAAzB,EAAAC,cAAC+B,EAAA,EAAD,KAEQR,EAAOS,IAAI,SAACC,EAAOC,GAAR,OACPV,EAAAzB,EAAAC,cAACmC,EAAA,EAAD,CACIC,IAAKF,EACLzB,KAAMwB,EAAMxB,KACZ4B,OAAQ,SAAAzC,GAAK,OAET4B,EAAAzB,EAAAC,cAACiC,EAAMpB,UAAPyB,OAAAC,OAAA,GAAqB3C,EAArB,CAA4B2B,OAAQU,EAAMV,OAAQX,MAAOqB,EAAMrB,uBAnB1EL,qCCInBiC,oNACFC,MAAQ,CACJC,UAAW,CACP,CACIjC,KAAM,IACNC,KAAM,OACNC,KAAM,QACNC,OAAO,GAEX,CACIH,KAAM,UACNC,KAAM,SACNC,KAAM,oFAMT,IAAAgC,EAAAhD,KACL,OACI6B,EAAAzB,EAAAC,cAAA,OAAKH,UAAU,aACX2B,EAAAzB,EAAAC,cAAA,OAAKH,UAAU,sBAGf2B,EAAAzB,EAAAC,cAAA,OAAKH,UAAU,mBACX2B,EAAAzB,EAAAC,cAAA,MAAIH,UAAU,6BACTF,KAAK8C,MAAMC,UAAUV,IAAI,SAACC,EAAOC,GAAR,OACtBV,EAAAzB,EAAAC,cAAA,OAAKH,UAAS,6BAAAQ,OAA+BsC,EAAK/C,MAAMgD,SAASC,WAAaZ,EAAMxB,KAAO,YAAc,IAAM2B,IAAKF,GAChHV,EAAAzB,EAAAC,cAAC8C,EAAA,EAAD,CAAMjD,UAAU,iBAAiBkD,GAAId,EAAMxB,MACvCe,EAAAzB,EAAAC,cAACW,EAAA,EAAD,CAAMd,UAAU,uBAAuBS,KAAM2B,EAAMtB,OACnDa,EAAAzB,EAAAC,cAAA,QAAMH,UAAU,wBAAwBoC,EAAMvB,YAMlEc,EAAAzB,EAAAC,cAAA,OAAKH,UAAU,6BApCTU,cA4CPyC,cAAWR,GCvCNS,QACW,cAA7BC,OAAON,SAASO,UAEe,UAA7BD,OAAON,SAASO,UAEhBD,OAAON,SAASO,SAASC,MACvB,2DCPNC,IAAShB,OAAOb,EAAAzB,EAAAC,cAACsD,EAAA,EAAD,KACZ9B,EAAAzB,EAAAC,cAAA,QAAMH,UAAU,UACZ2B,EAAAzB,EAAAC,cAAA,SAAOH,UAAU,iBACb2B,EAAAzB,EAAAC,cAACuD,EAAD,OAEJ/B,EAAAzB,EAAAC,cAAA,OAAKH,UAAU,mBACX2B,EAAAzB,EAAAC,cAACwD,EAAD,CAAYjC,OAAQA,OAGdkC,SAASC,eAAe,SD6GpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.8db84dca.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport classNames from 'classnames'\n\nimport './index.scss'\n\nclass Icon extends Component {\n    render() {\n        const classString = classNames(\n            'c-icon',\n            this.props.className\n        )\n        return (\n            <i className={classString} style={this.props.style} onClick={this.props.onClick}>\n                <svg aria-hidden=\"true\">\n                    <use xlinkHref={`#icon-${this.props.type}`}></use>\n                </svg >\n            </i>\n        )\n    }\n}\n\nexport default Icon","import { lazy } from 'react'\n\nexport default [\n    {\n        path: '/magnet',\n        name: 'Magnet',\n        icon: 'magnet',\n        exact: true,\n        component: lazy(() => import('@/pages/Magnet'))\n    },\n    {\n        path: '/',\n        name: 'Home',\n        icon: 'movie1',\n        exact: true,\n        component: lazy(() => import('@/pages/Movies'))\n    },\n    {\n        path: '/*',\n        name: 'NotFound',\n        icon: '404',\n        component: lazy(() => import('@/pages/NotFound'))\n    }\n]\n","import React, { Component, Suspense } from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nclass RouterView extends Component {\n    render() {\n        const { routes = [] } = this.props\n\n        return (\n            <Suspense fallback={<div style={{\n                position: 'absolute',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)'\n            }}>Loading</div>}>\n                <Switch>\n                    {\n                        routes.map((route, index) =>\n                            <Route\n                                key={index}\n                                path={route.path}\n                                render={props => (\n                                    // pass the sub-routes down to keep nesting\n                                    <route.component {...props} routes={route.routes} exact={route.exact} />\n                                )}\n                            />\n                        )\n                    }\n                </Switch>\n            </Suspense>\n        )\n    }\n}\n\nexport default RouterView","import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom';\n\nimport Icon from '@/components/base/icon'\n\nimport './index.scss'\n\nclass Sidebar extends Component {\n    state = {\n        navigates: [\n            {\n                path: '/',\n                name: 'Home',\n                icon: 'movie',\n                exact: true\n            },\n            {\n                path: '/magnet',\n                name: 'Magnet',\n                icon: 'magnet'\n            }\n        ]\n\n    }\n\n    render() {\n        return (\n            <div className=\"c-sidebar\">\n                <div className=\"c-sidebar__header\">\n\n                </div>\n                <div className=\"c-sidebar__body\">\n                    <ul className=\"c-sidebar__navigator-list\">\n                        {this.state.navigates.map((route, index) =>\n                            <nav className={`c-sidebar__navigator-item ${this.props.location.pathname === route.path ? 'is-active' : ''}`} key={index}>\n                                <Link className=\"navigator-link\" to={route.path}>\n                                    <Icon className=\"navigator-link__icon\" type={route.icon} />\n                                    <span className=\"navigator-link__name\">{route.name}</span>\n                                </Link>\n                            </nav>\n                        )}\n                    </ul>\n                </div>\n                <div className=\"c-sidebar-footer\">\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Sidebar)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport './index.scss'\nimport routes from '@/routes'\nimport RouterView from '@/components/router-view'\nimport Sidebar from '@/components/sidebar'\n\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<BrowserRouter>\n    <main className=\"layout\">\n        <aside className=\"layout__aside\">\n            <Sidebar />\n        </aside>\n        <div className=\"layout__content\">\n            <RouterView routes={routes} />\n        </div>\n    </main>\n</BrowserRouter>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}